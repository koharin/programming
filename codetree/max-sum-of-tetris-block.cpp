#include <iostream>
#include <algorithm> // max
using namespace std;

int graph[200][200]={0,};
int n,m; 
int blocks[19][4][4]={
    { // 1
        {1,1,0,0},
        {1,1,0,0},
        {0,0,0,0},
        {0,0,0,0}
    },
    { // 2
        {1,1,1,1},
        {0,0,0,0},
        {0,0,0,0},
        {0,0,0,0}
    },
    { // 3
        {1,0,0,0},
        {1,0,0,0},
        {1,0,0,0},
        {1,0,0,0}
    },
    { // 4
        {0,1,1,0},
        {1,1,0,0},
        {0,0,0,0},
        {0,0,0,0}
    },
    { // 5
        {1,1,0,0},
        {0,1,1,0},
        {0,0,0,0},
        {0,0,0,0}
    },
    { // 6
        {1,0,0,0},
        {1,1,0,0},
        {0,1,0,0},
        {0,0,0,0}
    },
    { // 7
        {0,1,0,0},
        {1,1,0,0},
        {1,0,0,0},
        {0,0,0,0}
    },
    { // 8
        {1,1,1,0},
        {0,1,0,0},
        {0,0,0,0},
        {0,0,0,0}
    },
    { // 9
        {0,1,0,0},
        {1,1,1,0},
        {0,0,0,0},
        {0,0,0,0}
    },
    { // 10
        {1,0,0,0},
        {1,1,0,0},
        {1,0,0,0},
        {0,0,0,0}
    },
    { // 11
        {0,1,0,0},
        {1,1,0,0},
        {0,1,0,0},
        {0,0,0,0}
    },
    { // 12
        {1,0,0,0},
        {1,0,0,0},
        {1,1,0,0},
        {0,0,0,0}
    },
    { // 13
        {0,1,0,0},
        {0,1,0,0},
        {1,1,0,0},
        {0,0,0,0}
    },
    { // 14
        {1,1,1,0},
        {1,0,0,0},
        {0,0,0,0},
        {0,0,0,0}
    },
    { // 15
        {1,1,1,0},
        {0,0,1,0},
        {0,0,0,0},
        {0,0,0,0}
    },
    { // 16
        {1,1,0,0},
        {1,0,0,0},
        {1,0,0,0},
        {0,0,0,0}
    },
    { // 17
        {1,1,0,0},
        {0,1,0,0},
        {0,1,0,0},
        {0,0,0,0}
    },
    { // 18
        {1,0,0,0},
        {1,1,1,0},
        {0,0,0,0},
        {0,0,0,0}
    },
    { // 19
        {0,0,1,0},
        {1,1,1,0},
        {0,0,0,0},
        {0,0,0,0}
    }
};
// 주어진 위치에서 최대 합 반환
int cal(int x, int y){
    int maxx=0;
    for(int i=0; i<19; i++){ 
        // x,y 위치는 4개 (한 블록 구하는 경우)
        int sum=0;
        for(int dx=0; dx<4; dx++){
            for(int dy=0; dy<4; dy++){
                int nx=x+dx;
                int ny=y+dy;
                if(nx<0 || ny<0 || nx>=n || ny>=m || blocks[i][dx][dy]==0) continue; // block에서 유효한 위치인지 확인하므로 dx,dy를 줌 nx,ny는 실제 graph에서의 유효성 체크
                sum+=graph[nx][ny];
            }
        }
        maxx=max(maxx,sum);//한 블록 값 구하고 max면 업데이트
    }
    return maxx;
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);
    cin >> n >> m;
    int maxx=0;
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++) cin >> graph[i][j];
    }
    // 각 위치에 대해 탐색 진행
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            maxx=max(maxx, cal(i,j));
        }
    }
    cout << maxx << endl;
    return 0;
}
// 각 블럭 모양 별로 서로 다른 모양 개수는 1,2,4,4,8로 19가지
